module AoC2021.Tests.Day16

open NUnit.Framework
open AoC2021.Day16
open AoC2021.Bits

[<Test>]
let TestToDecimal () =
    let input = "D2FE28"
    Assert.AreEqual("110100101111111000101000", (Bits.fromHexString >> Bits.toBinaryString) input)

[<Test>]
let ParsePacketLiteral () =
    let input = "D2FE28"
    let expected : Packet = { Version = 6; Type = 4 }, Literal 2021
    let result, bitsConsumed, bitsRemaining = parsePacketRec ((Bits.fromHexString input), 0) 
    Assert.AreEqual(expected, result)
    Assert.AreEqual(21, bitsConsumed)
    Assert.AreEqual(3, List.length bitsRemaining)
    Assert.IsTrue(List.forall ((=) false) bitsRemaining)
    

[<Test>]
let ParsePacketOp1 () =
    let input = "38006F45291200"
    let sub1 = { Version = 6; Type = 4 }, Literal 10
    let sub2 = { Version = 2; Type = 4 }, Literal 20
    let expected : Packet = { Version = 1; Type = 6 }, Operator (LessThan, (TotalBitLength, 27, [sub1; sub2]))
    Assert.AreEqual(expected, parsePacket (Bits.fromHexString input))



[<Test>]
let ParsePacketOp2 () =
    let input = "EE00D40C823060"
    let sub1 = { Version = 2; Type = 4 }, Literal 1
    let sub2 = { Version = 4; Type = 4 }, Literal 2
    let sub3 = { Version = 1; Type = 4 }, Literal 3
    let expected : Packet = { Version = 7; Type = 3 }, Operator (Maximum, (NrOfPackets, 3, [sub1; sub2; sub3]))
    Assert.AreEqual(expected, parsePacket (Bits.fromHexString input))

[<Test>]
let Day16APractice () =
    Assert.AreEqual(16, day16a "8A004A801A8002F478")
    Assert.AreEqual(12, day16a "620080001611562C8802118E34")
    Assert.AreEqual(23, day16a "C0015000016115A2E0802F182340")
    Assert.AreEqual(31, day16a "A0016C880162017C3686B18A3D4780")

let input


[<Test>]
let Day16A () =
    Assert.AreEqual(969, day16a input)
    
    

[<Test>]
let Day16BPractice () =
    Assert.AreEqual(3, day16b "C200B40A82")
    Assert.AreEqual(54, day16b "04005AC33890")
    Assert.AreEqual(7, day16b "880086C3E88112")
    Assert.AreEqual(9, day16b "CE00C43D881120")
    Assert.AreEqual(1, day16b "D8005AC2A8F0")
    Assert.AreEqual(0, day16b "F600BC2D8F")
    Assert.AreEqual(0, day16b "9C005AC2F8F0")
    Assert.AreEqual(1, day16b "9C0141080250320F1802104A08")